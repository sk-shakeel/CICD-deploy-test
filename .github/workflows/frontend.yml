name: Frontend CICD

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  packages: write

jobs:
  frontend-CI:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Login to GHCR
        run: |
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build the frontend image and push it to GHCR
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ramp-frontend:latest
          context: frontend

  frontend-CD:
    name: Frontend CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to AWS instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_INSTANCE_IP }}
          username: ${{ secrets.AWS_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          script: |
            sudo docker pull ghcr.io/${{ github.repository_owner }}/ramp-frontend:latest
            sudo docker run -d -p 8080:8080 ghcr.io/${{ github.repository_owner }}/ramp-frontend:latest
